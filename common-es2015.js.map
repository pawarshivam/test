{"version":3,"sources":["./src/app/services/department.service.ts"],"names":[],"mappings":";;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmD;AAEd;;;AAK9B,MAAM,iBAAiB;IAK5B,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAJpC,UAAK,GAAG,KAAK,CAAC;QACd,WAAM,GAA6B,IAAI,oDAAe,CAAU,KAAK,CAAC,CAAC;QACvE,iBAAY,GAAuC,IAAI,oDAAe,CAAoB,EAAE,CAAC,CAAC;QAG5F,IAAI,CAAC,MAAM,CAAC,SAAS,CACnB,CAAC,KAAc,EAAE,EAAE;YACjB,IAAI,KAAK,EAAE;gBACT,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,SAAS,CACxC,CAAC,MAAyB,EAAE,EAAE;oBAC5B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBAExB,IAAI,CAAC,YAAY,CAAC,IAAI,CACpB,MAAM,CAAC,IAAI,CAAC,WAAW,CACxB,CAAC;gBACJ,CAAC,EACD,CAAC,KAAwB,EAAE,EAAE;gBAC7B,CAAC,CACF,CAAC;aACH;QACH,CAAC,CACF,CAAC;IACJ,CAAC;IAED,cAAc;QACZ,IAAI,IAAI,CAAC,KAAK,KAAK,KAAK,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,KAAK,CAAC,EAAE;YAC3G,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;YAElB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACxB;QAED,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED,uBAAuB,CAAC,IAAY;QAClC,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,2BAA2B,IAAI,EAAE,CAAC,CAAC,IAAI,CAC1D,0DAAG,CAAC,CAAC,MAAyB,EAAqB,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IACpF,CAAC;IAED,aAAa,CAAC,UAAe;QAC3B,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE;YAClC,UAAU;SACX,CAAC,CAAC;IACL,CAAC;IAED,gBAAgB,CAAC,EAAU,EAAE,UAAe;QAC1C,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,EAAE,EAAE;YAC1C,UAAU;SACX,CAAC,CAAC;IACL,CAAC;IAED,gBAAgB,CAAC,EAAU;QACzB,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;IAC/C,CAAC;;kFAtDU,iBAAiB;oGAAjB,iBAAiB,WAAjB,iBAAiB,mBAFhB,MAAM","file":"common-es2015.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpResponseModel } from '@models/http/response.model';\r\nimport { DepartmentModel } from '@models/department.model';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { ApiService } from '@services/api.service';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DepartmentService {\r\n  $init = false;\r\n  $dirty: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\r\n  $departments: BehaviorSubject<DepartmentModel[]> = new BehaviorSubject<DepartmentModel[]>([]);\r\n\r\n  constructor(private $api: ApiService) {\r\n    this.$dirty.subscribe(\r\n      (dirty: boolean) => {\r\n        if (dirty) {\r\n          this.$api.get('/department/all').subscribe(\r\n            (result: HttpResponseModel) => {\r\n              this.$dirty.next(false);\r\n\r\n              this.$departments.next(\r\n                result.data.departments\r\n              );\r\n            },\r\n            (error: HttpResponseModel) => {\r\n            }\r\n          );\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  getDepartments(): Observable<DepartmentModel[]> {\r\n    if (this.$init === false || (this.$departments.getValue().length === 0 && this.$dirty.getValue() === false)) {\r\n      this.$init = true;\r\n\r\n      this.$dirty.next(true);\r\n    }\r\n\r\n    return this.$departments;\r\n  }\r\n\r\n  getDepartmentsSlugified(slug: string): Observable<DepartmentModel[]> {\r\n    return this.$api.get(`/department/all/slugify/${slug}`).pipe(\r\n      map((result: HttpResponseModel): DepartmentModel[] => result.data.departments));\r\n  }\r\n\r\n  addDepartment(department: any): Observable<HttpResponseModel> {\r\n    return this.$api.put('/department', {\r\n      department,\r\n    });\r\n  }\r\n\r\n  updateDepartment(id: number, department: any): Observable<HttpResponseModel> {\r\n    return this.$api.patch(`/department/${id}`, {\r\n      department,\r\n    });\r\n  }\r\n\r\n  deleteDepartment(id: number): Observable<HttpResponseModel> {\r\n    return this.$api.delete(`/department/${id}`);\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}