{"version":3,"sources":["webpack:///src/app/admin/users/users.module.ts","webpack:///src/app/admin/users/users-routing.module.ts","webpack:///src/app/services/role.service.ts","webpack:///src/app/admin/users/visits/visits.component.ts","webpack:///src/app/admin/users/visits/visits.component.html","webpack:///src/app/admin/users/all/all.component.ts","webpack:///src/app/admin/users/all/all.component.html","webpack:///src/app/admin/users/bulk/bulk.component.html","webpack:///src/app/admin/users/bulk/bulk.component.ts","webpack:///src/app/admin/users/filter/filter.component.ts","webpack:///src/app/admin/users/filter/filter.component.html","webpack:///src/app/admin/users/user/user.component.html","webpack:///src/app/admin/users/user/user.component.ts","webpack:///src/app/admin/users/users.component.ts","webpack:///src/app/admin/users/users.component.html","webpack:///src/app/services/user.service.ts"],"names":["UsersModule","routes","path","component","UsersRoutingModule","forChild","RoleService","$api","$init","$dirty","$roles","subscribe","dirty","get","result","next","data","roles","error","getValue","length","VisitsComponent","$user","$visit","$snackBar","config","breakpoints","date","Date","status","sort","sse","isMD","vtdc","vtds","user","open","duration","getVisitsOfUser","id","visits","statuses","getVisits","AllComponent","$csv","cache","utdc","utds","filter","getUsers","users","message","getUsersCSV","prompt","filename","getUser","updateFilter","BulkComponent","file","event","csv","preventDefault","click","target","files","uploadCSV","storeCSV","pickCSV","FilterComponent","$department","$role","fe","mode","departments","query","role","ids","department","getRoles","getDepartments","map","emit","toggle","UserComponent","$confirm","cdr","afterClosed","deleteUser","nullifyUser","updateUserRole","black","updateUserBlack","profilePath","name","label","UsersComponent","UserService","post","pipe","rid","patch","fd","FormData","append","upload","api","url","org","phone"],"mappings":"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","file":"admin-users-users-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { UsersRoutingModule } from '@admin/users/users-routing.module';\r\nimport { UsersComponent } from '@admin/users/users.component';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { BulkComponent } from '@admin/users/bulk/bulk.component';\r\nimport { AllComponent } from '@admin/users/all/all.component';\r\nimport { FilterComponent } from '@admin/users/filter/filter.component';\r\nimport { UserComponent } from '@admin/users/user/user.component';\r\nimport { VisitsComponent } from './visits/visits.component';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\n\r\n\r\n@NgModule({\r\n  declarations: [UsersComponent, BulkComponent, AllComponent, FilterComponent, UserComponent, VisitsComponent],\r\n  imports: [\r\n    CommonModule,\r\n    UsersRoutingModule,\r\n    MatTabsModule,\r\n    MatCardModule,\r\n    FormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatButtonModule,\r\n    MatTableModule,\r\n    MatSnackBarModule,\r\n    MatDividerModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatMenuModule,\r\n  ]\r\n})\r\nexport class UsersModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { UsersComponent } from '@admin/users/users.component';\r\n\r\nconst routes: Routes = [{ path: '', component: UsersComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class UsersRoutingModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpResponseModel } from '@models/http/response.model';\r\nimport { RoleModel } from '@models/role.model';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { ApiService } from '@services/api.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RoleService {\r\n  $init = false;\r\n  $dirty: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\r\n  $roles: BehaviorSubject<RoleModel[]> = new BehaviorSubject<RoleModel[]>([]);\r\n\r\n  constructor(private $api: ApiService) {\r\n    this.$dirty.subscribe(\r\n      (dirty: boolean) => {\r\n        if (dirty) {\r\n          this.$api.get('/role/all').subscribe(\r\n            (result: HttpResponseModel) => {\r\n              this.$dirty.next(false);\r\n\r\n              this.$roles.next(\r\n                result.data.roles\r\n              );\r\n            },\r\n            (error: HttpResponseModel) => {\r\n            }\r\n          );\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  getRoles(): Observable<RoleModel[]> {\r\n    if (this.$init === false  || (this.$roles.getValue().length === 0 && this.$dirty.getValue() === false)) {\r\n      this.$init = true;\r\n\r\n      this.$dirty.next(true);\r\n    }\r\n\r\n    return this.$roles;\r\n  }\r\n}\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { StatusModel } from '@models/status.model';\r\nimport { VisitModel } from '@models/visit.model';\r\nimport { BreakPointsService } from '@services/breakpoints.service';\r\nimport { ConfigService } from '@services/config.service';\r\nimport { UserService } from '@services/user.service';\r\nimport { VisitService } from '@services/visit.service';\r\n\r\n@Component({\r\n  selector: 'app-visits',\r\n  templateUrl: './visits.component.html',\r\n  styleUrls: ['./visits.component.css']\r\n})\r\nexport class VisitsComponent implements OnInit {\r\n  date: Date = new Date();\r\n  status: number = 2;\r\n\r\n  @ViewChild(MatSort)\r\n  sort: MatSort | null = null;\r\n\r\n  sse = '';\r\n\r\n  // Visits table\r\n  vtdc: string[];\r\n  vtds: MatTableDataSource<VisitModel>;\r\n\r\n  constructor(\r\n    private $user: UserService,\r\n    private $visit: VisitService,\r\n    private $snackBar: MatSnackBar,\r\n    public config: ConfigService,\r\n    public breakpoints: BreakPointsService,\r\n  ) {\r\n    if (this.breakpoints.isMD) {\r\n      this.vtdc = ['id', 'visitor', 'agenda', 'vehicle', 'action'];\r\n    } else {\r\n      this.vtdc = ['id', 'visitor', 'agenda', 'action'];\r\n    }\r\n\r\n    this.vtds = new MatTableDataSource<VisitModel>([\r\n    ]);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n\r\n  getVisits(): void {\r\n    let user = this.$user.$user.getValue();\r\n\r\n    if (user == null) {\r\n      this.$snackBar.open('Please select user first', '', {\r\n        duration: 3000,\r\n      });\r\n    } else\r\n\r\n      this.$visit.getVisitsOfUser(user.id, this.status, this.date)\r\n        .subscribe(\r\n          (visits: VisitModel[]) => {\r\n            this.vtds.data = visits;\r\n            this.vtds.sort = this.sort;\r\n\r\n            if (visits.length === 0) {\r\n              this.$snackBar.open('You do not have anything here', '', {\r\n                duration: 3000,\r\n              });\r\n            }\r\n          }\r\n        );\r\n  }\r\n\r\n  get statuses(): StatusModel[] {\r\n    return this.config.statuses;\r\n  }\r\n}\r\n","<div class=\"container-fluid container-visits\">\r\n    <div class=\"row no-gutters\">\r\n        <div class=\"col-12 col-md-8\">\r\n            <div class=\"row header bg-dotted\">\r\n                <div class=\"col-12 col-md-6\">\r\n                    <!-- Day -->\r\n                    <mat-form-field hintLabel=\"Day\" appearance=\"outline\" class=\"w-100\">\r\n                        <mat-label>Day</mat-label>\r\n                        <input matInput [matDatepicker]=\"picker\" [(ngModel)]=\"date\" ngDefaultControl\r\n                            (dateChange)=\"getVisits()\">\r\n                        <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n                        <mat-datepicker #picker></mat-datepicker>\r\n                    </mat-form-field>\r\n                </div>\r\n                <div class=\"col-12 col-md-6\">\r\n                    <!-- Visit Status -->\r\n                    <mat-form-field hintLabel=\"Visit Status\" appearance=\"outline\" class=\"w-100\">\r\n                        <mat-label>Visit Status</mat-label>\r\n                        <mat-select [(ngModel)]=\"status\" (selectionChange)=\"getVisits()\">\r\n                            <mat-option *ngFor=\"let status of statuses\" [value]=\"status.id\">\r\n                                {{status.label}}\r\n                            </mat-option>\r\n                        </mat-select>\r\n                    </mat-form-field>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n                <div class=\"col\">\r\n\r\n                    <!-- Table -->\r\n                    <mat-table [dataSource]=\"vtds\" matSort>\r\n                        <!-- ID Column -->\r\n                        <ng-container matColumnDef=\"id\">\r\n                            <mat-header-cell *matHeaderCellDef mat-sort-header>ID</mat-header-cell>\r\n                            <mat-cell *matCellDef=\"let visit\">{{visit.id}}</mat-cell>\r\n                        </ng-container>\r\n\r\n                        <!-- Agenda Column -->\r\n                        <ng-container matColumnDef=\"agenda\">\r\n                            <mat-header-cell *matHeaderCellDef mat-sort-header>Agenda</mat-header-cell>\r\n                            <mat-cell *matCellDef=\"let visit\">{{visit.agenda.label}}</mat-cell>\r\n                        </ng-container>\r\n\r\n                        <!-- Visitor Column -->\r\n                        <ng-container matColumnDef=\"visitor\">\r\n                            <mat-header-cell *matHeaderCellDef mat-sort-header>Visitor</mat-header-cell>\r\n                            <mat-cell *matCellDef=\"let visit\">{{visit.visitor.name}}</mat-cell>\r\n                        </ng-container>\r\n\r\n                        <!-- Vehicle Column -->\r\n                        <ng-container matColumnDef=\"vehicle\">\r\n                            <mat-header-cell *matHeaderCellDef mat-sort-header>Vehicle</mat-header-cell>\r\n                            <mat-cell *matCellDef=\"let visit\">{{visit.vehicle}}</mat-cell>\r\n                        </ng-container>\r\n\r\n                        <!-- Action Column -->\r\n                        <ng-container matColumnDef=\"action\">\r\n                            <mat-header-cell *matHeaderCellDef mat-sort-header>Action</mat-header-cell>\r\n                            <mat-cell *matCellDef=\"let visit\">\r\n                                <button mat-icon-button class=\"mat-elevation-z\">\r\n                                    <img src=\"assets/images/eye.svg\" width=\"18px\">\r\n                                </button>\r\n                            </mat-cell>\r\n                        </ng-container>\r\n\r\n                        <mat-header-row *matHeaderRowDef=\"vtdc\"></mat-header-row>\r\n                        <mat-row *matRowDef=\"let row; columns: vtdc\"></mat-row>\r\n                    </mat-table>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"col-12 col-md-4\">\r\n            <app-user></app-user>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"container-sse\">\r\n        <div class=\"sse-container\">\r\n            <p class=\"sse\" *ngIf=\"sse\">\r\n                {{sse}}\r\n            </p>\r\n        </div>\r\n    </div>\r\n</div>","import { AfterContentInit, Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { HttpResponseModel } from '@models/http/response.model';\r\nimport { UserModel } from '@models/user.model';\r\nimport { BreakPointsService } from '@services/breakpoints.service';\r\nimport { CSVService } from '@services/csv.service';\r\nimport { UserService } from '@services/user.service';\r\n// import { UXVService } from '@services/uxv.service';\r\n\r\n@Component({\r\n  selector: 'app-all',\r\n  templateUrl: './all.component.html',\r\n  styleUrls: ['./all.component.css']\r\n})\r\nexport class AllComponent implements OnInit, AfterContentInit {\r\n  @ViewChild(MatSort)\r\n  sort: MatSort | null = null;\r\n\r\n  sse = '';\r\n\r\n  cache: any = null;\r\n\r\n  // Users table\r\n  utdc: string[];\r\n  utds: MatTableDataSource<UserModel>;\r\n\r\n  constructor(\r\n    private $user: UserService,\r\n    private $csv: CSVService,\r\n    private $snackBar: MatSnackBar,\r\n    public breakpoints: BreakPointsService,\r\n  ) {\r\n    if (this.breakpoints.isMD) {\r\n      this.utdc = ['id', 'name', 'phone', 'action'];\r\n    } else {\r\n      this.utdc = ['id', 'name', 'action'];\r\n    }\r\n\r\n    this.utds = new MatTableDataSource<UserModel>([\r\n    ]);\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  ngAfterContentInit(): void {\r\n  }\r\n\r\n  updateFilter(filter: any): void {\r\n    this.cache = filter;\r\n\r\n    this.sse = '';\r\n    this.$user.getUsers(filter).subscribe(\r\n      (users: UserModel[]) => {\r\n        this.utds.data = users;\r\n        this.utds.sort = this.sort;\r\n\r\n        if (users.length === 0) {\r\n          this.$snackBar.open('You do not have anything here', '', {\r\n            duration: 3000,\r\n          });\r\n        }\r\n      },\r\n      (error: HttpResponseModel) => {\r\n        this.sse = error.message;\r\n      }\r\n    );\r\n  }\r\n\r\n  getUsersCSV(): void {\r\n    if (this.cache) {\r\n      this.sse = '';\r\n\r\n      this.$user.getUsersCSV(this.cache).subscribe(\r\n        (result: HttpResponseModel) => {\r\n          this.$csv.prompt(result.data.filename);\r\n        },\r\n        (error: HttpResponseModel) => {\r\n          this.sse = error.message;\r\n        }\r\n      );\r\n    } else {\r\n      this.$snackBar.open('You must first fetch users', '', {\r\n        duration: 3000,\r\n      });\r\n    }\r\n  }\r\n\r\n  getUser(id: number) {\r\n    this.$user.getUser(id);\r\n  }\r\n}\r\n","<div class=\"row no-gutters\">\r\n    <div class=\"col-12 col-md-8\">\r\n        <app-filter (fe)=\"updateFilter($event)\"></app-filter>\r\n\r\n        <!-- Table -->\r\n        <mat-table [dataSource]=\"utds\" matSort>\r\n            <!-- ID Column -->\r\n            <ng-container matColumnDef=\"id\">\r\n                <mat-header-cell *matHeaderCellDef mat-sort-header>ID</mat-header-cell>\r\n                <mat-cell *matCellDef=\"let user\">{{user.id}}</mat-cell>\r\n            </ng-container>\r\n\r\n            <!-- Name Column -->\r\n            <ng-container matColumnDef=\"name\">\r\n                <mat-header-cell *matHeaderCellDef mat-sort-header>Name</mat-header-cell>\r\n                <mat-cell *matCellDef=\"let user\">{{user.name}}</mat-cell>\r\n            </ng-container>\r\n\r\n            <!-- Phone Column -->\r\n            <ng-container matColumnDef=\"phone\">\r\n                <mat-header-cell *matHeaderCellDef mat-sort-header>Phone</mat-header-cell>\r\n                <mat-cell *matCellDef=\"let user\">{{user.phone}}</mat-cell>\r\n            </ng-container>\r\n\r\n            <!-- Action Column -->\r\n            <ng-container matColumnDef=\"action\">\r\n                <mat-header-cell *matHeaderCellDef mat-sort-header>Action</mat-header-cell>\r\n                <mat-cell *matCellDef=\"let user\">\r\n                    <button mat-icon-button class=\"mat-elevation-z\" (click)=\"getUser(user.id)\">\r\n                        <img src=\"assets/images/eye.svg\" width=\"18px\">\r\n                    </button>\r\n                </mat-cell>\r\n            </ng-container>\r\n\r\n            <mat-header-row *matHeaderRowDef=\"utdc\"></mat-header-row>\r\n            <mat-row *matRowDef=\"let row; columns: utdc\"></mat-row>\r\n        </mat-table>\r\n    </div>\r\n\r\n    <div class=\"col-12 col-md-4\">\r\n        <app-user></app-user>\r\n    </div>\r\n\r\n    <div class=\"col-12 col-md-8\">\r\n        <div class=\"d-flex justify-content-center breathe\">\r\n            <button mat-mini-fab color=\"primary\" class=\"mat-elevation-z\" (click)=\"getUsersCSV()\">\r\n                <img src=\"assets/images/database.svg\" width=\"18px\">\r\n            </button>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"container-sse\">\r\n    <div class=\"sse-container\">\r\n        <p class=\"sse\" *ngIf=\"sse\">\r\n            {{sse}}\r\n        </p>\r\n    </div>\r\n</div>","<div class=\"row no-gutters\">\r\n    <div class=\"col-12 bg-dotted\">\r\n        <mat-card class=\"card-upload\">\r\n            <mat-card-header>\r\n                <mat-card-title>Bulk Upload</mat-card-title>\r\n                <mat-card-subtitle>Upload a CSV and add all users at once</mat-card-subtitle>\r\n            </mat-card-header>\r\n            <mat-card-content>\r\n                <div class=\"row\">\r\n                    <div class=\"col-12 col-md-6\">\r\n                        <img src=\"assets/images/bulk.svg\" class=\"w-100\">\r\n                    </div>\r\n                </div>\r\n            </mat-card-content>\r\n            <mat-card-actions>\r\n                <div class=\"row\">\r\n                    <div class=\"col\">\r\n                        <!-- File -->\r\n                        <input type=\"file\" class=\"d-none\" #csv accept=\"text/csv\" (change)=\"storeCSV($event)\">\r\n\r\n                        <button mat-flat-button color=\"secondary\" class=\"w-100\" (click)=\"pickCSV($event, csv)\">\r\n                            Upload\r\n                        </button>\r\n                    </div>\r\n                    <div class=\"col\">\r\n                        <button mat-flat-button color=\"primary\" class=\"w-100\" [disabled]=\"file == null\" (click)=\"uploadCSV($event)\">\r\n                            Post\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </mat-card-actions>\r\n        </mat-card>\r\n    </div>\r\n\r\n    <div class=\"col-12\">\r\n        <div class=\"d-flex justify-content-center breathe\">\r\n            <a mat-mini-fab color=\"primary\" class=\"mat-elevation-z\" [href]=\"config.api.url + '/user/template'\">\r\n                <img src=\"assets/images/download-light.svg\" width=\"18px\">\r\n            </a>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"container-sse\">\r\n    <p class=\"sse\" *ngIf=\"sse\">\r\n        {{sse}}\r\n    </p>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { HttpResponseModel } from '@models/http/response.model';\r\nimport { ConfigService } from '@services/config.service';\r\nimport { UserService } from '@services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-bulk',\r\n  templateUrl: './bulk.component.html',\r\n  styleUrls: ['./bulk.component.css']\r\n})\r\nexport class BulkComponent implements OnInit {\r\n  sse = '';\r\n\r\n  file: File | null = null;\r\n\r\n  constructor(\r\n    private $user: UserService,\r\n    private $snackBar: MatSnackBar,\r\n    public config: ConfigService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  pickCSV(event: MouseEvent, csv: any): void {\r\n    event.preventDefault();\r\n\r\n    csv.click();\r\n  }\r\n\r\n  storeCSV(event: any): void {\r\n    if (event.target.files.length > 0) {\r\n      [this.file] = event.target.files;\r\n    }\r\n  }\r\n\r\n  uploadCSV(event: any): void {\r\n    event.preventDefault();\r\n\r\n    if (this.file) {\r\n      this.$user.uploadCSV(this.file).subscribe(\r\n        (result: HttpResponseModel) => {\r\n          this.$snackBar.open(result.message, '', {\r\n            duration: 3000,\r\n          });\r\n        },\r\n        (error: HttpResponseModel) => {\r\n          this.$snackBar.open(error.message, '', {\r\n            duration: 3000,\r\n          });\r\n        }\r\n      );\r\n    }\r\n  }\r\n}\r\n","import { AfterContentInit, Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { DepartmentModel } from '@models/department.model';\r\nimport { RoleModel } from '@models/role.model';\r\nimport { ConfigService } from '@services/config.service';\r\nimport { DepartmentService } from '@services/department.service';\r\nimport { RoleService } from '@services/role.service';\r\n\r\n@Component({\r\n  selector: 'app-filter',\r\n  templateUrl: './filter.component.html',\r\n  styleUrls: ['./filter.component.css']\r\n})\r\nexport class FilterComponent implements OnInit, AfterContentInit {\r\n  @Output() fe = new EventEmitter<any>();\r\n\r\n  /**\r\n   * Search | Select\r\n   */\r\n  mode = false;\r\n\r\n  roles: RoleModel[] = [];\r\n  departments: DepartmentModel[] = [];\r\n\r\n  filter: any = {\r\n    query: '',\r\n    role: {\r\n      ids: []\r\n    },\r\n    department: {\r\n      ids: []\r\n    },\r\n  };\r\n\r\n  constructor(\r\n    private $department: DepartmentService,\r\n    private $role: RoleService,\r\n    public config: ConfigService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  ngAfterContentInit(): void {\r\n    this.getRoles();\r\n    this.getDepartments();\r\n  }\r\n\r\n  getRoles(): void {\r\n    this.$role.getRoles().subscribe(\r\n      (roles: RoleModel[]) => {\r\n        this.roles = roles;\r\n        this.filter.role.ids = this.roles.map((role) => role.id);\r\n      }\r\n    );\r\n  }\r\n\r\n  getDepartments(): void {\r\n    this.$department.getDepartments()\r\n      .subscribe(\r\n        (departments: DepartmentModel[]) => {\r\n          this.departments = departments;\r\n          this.filter.department.ids = this.departments.map((department) => department.id);\r\n        },\r\n      );\r\n  }\r\n\r\n  toggle(): void {\r\n    // Clear query\r\n    this.filter.query = '';\r\n    this.mode = !this.mode;\r\n  }\r\n\r\n  emit(): void {\r\n    this.fe.emit(this.filter);\r\n  }\r\n}\r\n","<div class=\"container-fluid container-filter bg-dotted\">\r\n    <div class=\"row no-gutters\">\r\n        <div class=\"col\">\r\n            <div class=\"row\" *ngIf=\"mode == false\">\r\n                <div class=\"col-12 col-md-6\">\r\n                    <!-- Department -->\r\n                    <mat-form-field hintLabel=\"Allowed departments\" appearance=\"outline\" class=\"w-100\">\r\n                        <mat-label>Department</mat-label>\r\n                        <mat-select multiple [(ngModel)]=\"filter.department.ids\">\r\n                            <mat-option *ngFor=\"let department of departments\" [value]=\"department.id\">\r\n                                {{department.name}}\r\n                            </mat-option>\r\n                        </mat-select>\r\n                    </mat-form-field>\r\n                </div>\r\n                <div class=\"col-12 col-md-6\">\r\n                    <!-- Role -->\r\n                    <mat-form-field hintLabel=\"Allowed privelege levels\" appearance=\"outline\" class=\"w-100\">\r\n                        <mat-label>Role</mat-label>\r\n                        <mat-select multiple [(ngModel)]=\"filter.role.ids\">\r\n                            <mat-option *ngFor=\"let role of roles\" [value]=\"role.id\">\r\n                                {{role.label}}\r\n                            </mat-option>\r\n                        </mat-select>\r\n                    </mat-form-field>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"row\" *ngIf=\"mode == true\">\r\n                <div class=\"col-12\">\r\n                    <!-- Query -->\r\n                    <mat-form-field hintLabel=\"Find specifically\" appearance=\"outline\" class=\"w-100\">\r\n                        <mat-label>Search</mat-label>\r\n                        <input type=\"text\" #query matInput maxlength=\"30\" placeholder=\"Bill Gates\"\r\n                            [(ngModel)]=\"filter.query\">\r\n                        <mat-hint align=\"end\">{{query.value.length || 0}} / 30</mat-hint>\r\n                    </mat-form-field>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"col-auto\">\r\n            <div class=\"container-fluid\">\r\n                <button mat-mini-fab color=\"secondary\" class=\"mat-elevation-z2\" (click)=\"toggle()\">\r\n                    <img src=\"assets/images/refresh-cw.svg\" *ngIf=\"mode == true\" width=\"18px\">\r\n                    <img src=\"assets/images/search.svg\" *ngIf=\"mode == false\" width=\"18px\">\r\n                </button>\r\n            </div>\r\n            <div class=\"container-fluid\">\r\n                <button mat-mini-fab color=\"secondary\" class=\"mat-elevation-z2\" (click)=\"emit()\">\r\n                    <img src=\"assets/images/arrow-right.svg\" width=\"18px\">\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>","<div class=\"container container-user\" *ngIf=\"user\">\r\n    <mat-card-header>\r\n        <div mat-card-avatar *ngIf=\"user.black\" [ngStyle]=\"{'background-color': '#242424'}\"></div>\r\n        <mat-card-title>\r\n            {{userName}}\r\n        </mat-card-title>\r\n        <mat-card-subtitle>\r\n            {{roleLabel}}\r\n        </mat-card-subtitle>\r\n    </mat-card-header>\r\n\r\n    <div class=\"profile\" [ngStyle]=\"{'background-image': 'url(' + profilePath + ')'}\">\r\n        <div class=\"username\">\r\n            {{userName}}\r\n        </div>\r\n        <div class=\"muser\">\r\n            <button mat-icon-button [matMenuTriggerFor]=\"muser\">\r\n                <img src=\"assets/images/edit-light.svg\" width=\"18px\">\r\n            </button>\r\n        </div>\r\n        <mat-menu #muser=\"matMenu\">\r\n            <button mat-menu-item [matMenuTriggerFor]=\"mroles\">Role</button>\r\n            <button mat-menu-item>\r\n                <span *ngIf=\"user.black\" (click)=\"updateUserBlack(false)\">\r\n                    Unblack\r\n                </span>\r\n                <span *ngIf=\"user.black == false\" (click)=\"updateUserBlack(true)\">\r\n                    Black\r\n                </span>\r\n            </button>\r\n            <button mat-menu-item (click)=\"deleteUser()\">Delete</button>\r\n        </mat-menu>\r\n        <mat-menu #mroles=\"matMenu\">\r\n            <button mat-menu-item *ngFor=\"let role of roles\" (click)=\"updateUserRole(role.id)\">{{role.label}}</button>\r\n        </mat-menu>\r\n    </div>\r\n\r\n    <section>\r\n        <table>\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        Name\r\n                    </td>\r\n                    <td>\r\n                        :\r\n                    </td>\r\n                    <td>\r\n                        {{user.name}}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        Department\r\n                    </td>\r\n                    <td>\r\n                        :\r\n                    </td>\r\n                    <td>\r\n                        {{user.department.name}}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        Role\r\n                    </td>\r\n                    <td>\r\n                        :\r\n                    </td>\r\n                    <td>\r\n                        {{user.role.label}}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        Phone\r\n                    </td>\r\n                    <td>\r\n                        :\r\n                    </td>\r\n                    <td>\r\n                        {{user.phone}}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        Email\r\n                    </td>\r\n                    <td>\r\n                        :\r\n                    </td>\r\n                    <td>\r\n                        {{user.email}}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        Designation\r\n                    </td>\r\n                    <td>\r\n                        :\r\n                    </td>\r\n                    <td>\r\n                        {{user.designation}}\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </section>\r\n</div>","import { AfterContentInit, Component, OnInit } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { HttpResponseModel } from '@models/http/response.model';\r\nimport { RoleModel } from '@models/role.model';\r\nimport { UserModel } from '@models/user.model';\r\nimport { ConfigService } from '@services/config.service';\r\nimport { ConfirmService } from '@services/confirm.service';\r\nimport { RoleService } from '@services/role.service';\r\nimport { UserService } from '@services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-user',\r\n  templateUrl: './user.component.html',\r\n  styleUrls: ['./user.component.css']\r\n})\r\nexport class UserComponent implements OnInit, AfterContentInit {\r\n  user: UserModel | null = null;\r\n\r\n  roles: RoleModel[] = [];\r\n\r\n  constructor(\r\n    private $user: UserService,\r\n    private $role: RoleService,\r\n    private $snackBar: MatSnackBar,\r\n    private $confirm: ConfirmService,\r\n    public config: ConfigService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  ngAfterContentInit(): void {\r\n    this.getUser();\r\n    this.getRoles();\r\n  }\r\n\r\n  getUser(): void {\r\n    this.$user.$user.subscribe((user: UserModel | null) => {\r\n      this.user = user;\r\n    });\r\n  }\r\n\r\n  getRoles(): void {\r\n    this.$role.getRoles().subscribe(\r\n      (roles: RoleModel[]) => {\r\n        this.roles = roles;\r\n      }\r\n    );\r\n  }\r\n\r\n  deleteUser(): void {\r\n    const cdr = this.$confirm.prompt(\r\n      'Are you sure?',\r\n      `This action is irreversible. Users are meant to be deleted on when they \r\n      are illegitimate or accidently created. This will also result in deleting \r\n      of information associated with the user`,\r\n    );\r\n\r\n    cdr.afterClosed().subscribe((result: boolean) => {\r\n      if (result) {\r\n        if (this.user) {\r\n          this.$user.deleteUser(this.user.id).subscribe(\r\n            () => {\r\n              this.$user.nullifyUser();\r\n              this.$snackBar.open(`User and associated information deleted`, '', {\r\n                duration: 3000,\r\n              });\r\n            },\r\n            (error: HttpResponseModel) => {\r\n              this.$snackBar.open(error.message, '', {\r\n                duration: 3000,\r\n              });\r\n            }\r\n          );\r\n        }\r\n      }\r\n      else {\r\n        this.$snackBar.open('Operation cancelled by the user', '', {\r\n          duration: 3000,\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  updateUserRole(id: number): void {\r\n    if (this.user) {\r\n      this.$user.updateUserRole(this.user.id, id).subscribe(\r\n        () => {\r\n          if (this.user) {\r\n            this.$user.getUser(this.user.id);\r\n          }\r\n          this.$snackBar.open(`User role updated`, '', {\r\n            duration: 3000,\r\n          });\r\n        },\r\n        (error: HttpResponseModel) => {\r\n          this.$snackBar.open(error.message, '', {\r\n            duration: 3000,\r\n          });\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  updateUserBlack(black: boolean): void {\r\n    if (this.user) {\r\n      this.$user.updateUserBlack(this.user.id, black).subscribe(\r\n        () => {\r\n          if (this.user) {\r\n            this.$user.getUser(this.user.id);\r\n          }\r\n          this.$snackBar.open(`User's black updated`, '', {\r\n            duration: 3000,\r\n          });\r\n        },\r\n        (error: HttpResponseModel) => {\r\n          this.$snackBar.open(error.message, '', {\r\n            duration: 3000,\r\n          });\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  get profilePath(): string {\r\n    return this.$user.profilePath;\r\n  }\r\n\r\n  get userName(): string {\r\n    const user = this.$user.$user?.getValue();\r\n    return user ? user.name : 'Untitled';\r\n  }\r\n\r\n  get roleLabel(): string {\r\n    const role = this.$user.role;\r\n    if (role) { return role.label; } else {\r\n      return '';\r\n    }\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-users',\r\n  templateUrl: './users.component.html',\r\n  styleUrls: ['./users.component.css']\r\n})\r\nexport class UsersComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div class=\"container-fluid container-cover container-users\">\r\n    <!-- Users -->\r\n    <mat-card >\r\n        <mat-card-header>\r\n            <mat-card-title>Users</mat-card-title>\r\n            <mat-card-subtitle>With great power comes great responsibility</mat-card-subtitle>\r\n        </mat-card-header>\r\n        <mat-card-content>\r\n            <div class=\"row no-gutters\">\r\n                <div class=\"col-12 col-md\">\r\n                    <mat-tab-group>\r\n                        <mat-tab label=\"All\">\r\n                            <app-all></app-all>\r\n                        </mat-tab>\r\n                        \r\n                        <mat-tab label=\"Visits\">\r\n                            <app-visits></app-visits>\r\n                        </mat-tab>\r\n\r\n                        <mat-tab label=\"Bulk\">\r\n                            <app-bulk></app-bulk>\r\n                        </mat-tab>\r\n                    </mat-tab-group>\r\n                </div>\r\n            </div>\r\n        </mat-card-content>\r\n\r\n        <mat-card-footer>\r\n            She said what you know about love?\r\n        </mat-card-footer>\r\n    </mat-card>\r\n</div>","import { Injectable } from '@angular/core';\r\nimport { HttpResponseModel } from '@models/http/response.model';\r\nimport { UserModel } from '@models/user.model';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ApiService } from '@services/api.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ConfigService } from './config.service';\r\nimport { RoleModel } from '@models/role.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n  getUsers(filter: any): Observable<UserModel[]> {\r\n    return this.$api.post('/user/all/filtered', {\r\n      filter,\r\n    }).pipe(\r\n      map((result: HttpResponseModel): UserModel[] => result.data.users));\r\n  }\r\n\r\n  getUsersCSV(filter: any): Observable<HttpResponseModel> {\r\n    return this.$api.post('/csv/users/all/filtered', {\r\n      filter,\r\n    });\r\n  }\r\n\r\n  deleteUser(id: number): Observable<HttpResponseModel> {\r\n    return this.$api.delete(`/user/${id}`);\r\n  }\r\n\r\n  updateUserRole(id: number, rid: number): Observable<HttpResponseModel> {\r\n    return this.$api.patch(`/user/${id}/role/${rid}`, {});\r\n  }\r\n\r\n  updateUserBlack(id: number, black: boolean): Observable<HttpResponseModel> {\r\n    return this.$api.patch(`/user/${id}/black/${black}`, {});\r\n  }\r\n\r\n  uploadCSV(csv: File): Observable<HttpResponseModel> {\r\n    const fd = new FormData();\r\n\r\n    fd.append('file', csv);\r\n\r\n    return this.$api.upload(fd, '/user/bulk').pipe(\r\n      map((result: HttpResponseModel): HttpResponseModel => result));\r\n  }\r\n\r\n  $user: BehaviorSubject<UserModel | null> = new BehaviorSubject<UserModel | null>(null);\r\n\r\n  constructor(\r\n    private $api: ApiService,\r\n    private $snackBar: MatSnackBar,\r\n    public config: ConfigService,\r\n  ) {\r\n  }\r\n\r\n  getUser(id: number): void {\r\n    this.$api.get(`/user/${id}`).subscribe(\r\n      (result: HttpResponseModel) => {\r\n        this.$user.next(result.data.user);\r\n      },\r\n      (error: HttpResponseModel) => {\r\n        this.$snackBar.open(error.message, '', {\r\n          duration: 3000,\r\n        });\r\n      });\r\n  }\r\n\r\n  nullifyUser(): void {\r\n    this.$user.next(null);\r\n  }\r\n\r\n  get user(): BehaviorSubject<UserModel | null> {\r\n    return this.$user;\r\n  }\r\n\r\n  get profilePath(): string {\r\n    const user = this.$user.getValue();\r\n    if (user) {\r\n      return `${this.config.api.url}/profile/${user.org.id}/${user.phone}`;\r\n    }\r\n    return `${this.config.api.url}/profile/loni`;\r\n  }\r\n\r\n  get role(): RoleModel | null {\r\n    const user = this.$user.getValue();\r\n    if (user) { return user.role; }\r\n    return null;\r\n  }\r\n}\r\n"]}