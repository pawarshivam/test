{"version":3,"sources":["webpack:///src/app/dashboard/visits/visits.component.ts","webpack:///src/app/dashboard/visits/visits.component.html","webpack:///src/app/dashboard/dashboard-routing.module.ts","webpack:///src/app/dashboard/dashboard.component.html","webpack:///src/app/dashboard/dashboard.component.ts","webpack:///src/app/dashboard/dashboard.module.ts","webpack:///src/app/services/visit.service.ts"],"names":["VisitsComponent","$visit","socket","department","dtds","vtdc","hosts","getVisits","on","id","payload","getVisitsOfDepartment","subscribe","visits","length","data","date","Date","getHours","getSeconds","getHostsOfVisit","response","console","log","routes","path","component","DashboardRoutingModule","forChild","DashboardComponent","$department","departments","getDepartments","DashboardModule","VisitService","$api","config","user","status","d","getDate","m","getMonth","y","getFullYear","get","pipe","result"],"mappings":"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","file":"dashboard-dashboard-module-es5.js","sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { DepartmentModel } from '@models/department.model';\r\nimport { HttpResponseModel } from '@models/http/response.model';\r\nimport { VisitModel } from '@models/visit.model';\r\nimport { VisitService } from '@services/visit.service';\r\nimport { Socket } from 'ngx-socket-io';\r\n\r\n@Component({\r\n  selector: 'app-visits',\r\n  templateUrl: './visits.component.html',\r\n  styleUrls: ['./visits.component.css']\r\n})\r\nexport class VisitsComponent implements OnInit {\r\n  @Input()\r\n  department: DepartmentModel | null = null;\r\n\r\n  dtds: MatTableDataSource<VisitModel>\r\n    =\r\n    new MatTableDataSource<VisitModel>([]);\r\n\r\n  vtdc: string[] = ['id', 'agenda', 'accompanying', 'vehicle', 'terminal', 'time', 'hosts'];\r\n\r\n  hosts: any = [];\r\n\r\n  constructor(\r\n    private $visit: VisitService,\r\n    private socket: Socket,\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getVisits();\r\n    this.socket.on(`channel-${this.department?.id}`, (payload: any) => {\r\n      this.getVisits();\r\n    });\r\n  }\r\n\r\n  getVisits(): void {\r\n    this.$visit.getVisitsOfDepartment(this.department?.id || 0).subscribe(\r\n      (visits: VisitModel[]) => {\r\n        if (visits.length > 0) {\r\n          this.dtds.data = visits;\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  getTime(date: string): string {\r\n    return `${new Date(date).getHours()}:${new Date(date).getSeconds()}`;\r\n  }\r\n\r\n  getHostsOfVisit(id: number): void {\r\n    this.hosts = [];\r\n    this.$visit.getHostsOfVisit(id)\r\n      .subscribe(\r\n        (response: HttpResponseModel) => {\r\n          this.hosts = response.data.hosts;\r\n          console.log(this.hosts);\r\n        },\r\n      );\r\n  }\r\n}\r\n","<mat-card>\r\n    <mat-card-header>\r\n        <mat-card-title>{{department?.name}}</mat-card-title>\r\n    </mat-card-header>\r\n\r\n    <mat-card-content>\r\n        <!-- Table -->\r\n        <mat-table [dataSource]=\"dtds\" matSort>\r\n            <!-- ID Column -->\r\n            <ng-container matColumnDef=\"id\">\r\n                <mat-header-cell *matHeaderCellDef mat-sort-header>ID</mat-header-cell>\r\n                <mat-cell *matCellDef=\"let visit\">{{visit.id}}</mat-cell>\r\n            </ng-container>\r\n\r\n            <!-- Agenda Column -->\r\n            <ng-container matColumnDef=\"agenda\">\r\n                <mat-header-cell *matHeaderCellDef mat-sort-header>Agenda</mat-header-cell>\r\n                <mat-cell *matCellDef=\"let visit\">{{visit.agenda.label}}</mat-cell>\r\n            </ng-container>\r\n\r\n            <!-- Accompanying Column -->\r\n            <ng-container matColumnDef=\"accompanying\">\r\n                <mat-header-cell *matHeaderCellDef mat-sort-header>ACC</mat-header-cell>\r\n                <mat-cell *matCellDef=\"let visit\">{{visit.accompanying}}</mat-cell>\r\n            </ng-container>\r\n\r\n            <!-- Terminal Column -->\r\n            <ng-container matColumnDef=\"terminal\">\r\n                <mat-header-cell *matHeaderCellDef mat-sort-header>Terminal</mat-header-cell>\r\n                <mat-cell *matCellDef=\"let visit\">{{visit.terminal_in.name}}</mat-cell>\r\n            </ng-container>\r\n\r\n            <!-- Time Column -->\r\n            <ng-container matColumnDef=\"time\">\r\n                <mat-header-cell *matHeaderCellDef mat-sort-header>Time</mat-header-cell>\r\n                <mat-cell *matCellDef=\"let visit\">{{getTime(visit.time_in)}}</mat-cell>\r\n            </ng-container>\r\n\r\n            <!-- Vehicle Column -->\r\n            <ng-container matColumnDef=\"vehicle\">\r\n                <mat-header-cell *matHeaderCellDef mat-sort-header>Vehicle</mat-header-cell>\r\n                <mat-cell *matCellDef=\"let visit\">{{visit.vehicle}}</mat-cell>\r\n            </ng-container>\r\n\r\n            <!-- Hosts Column -->\r\n            <ng-container matColumnDef=\"hosts\">\r\n                <mat-header-cell *matHeaderCellDef mat-sort-header>Hosts</mat-header-cell>\r\n                <mat-cell *matCellDef=\"let visit\">\r\n                    <button mat-icon-button class=\"mat-elevation-z\" [matMenuTriggerFor]=\"mhosts\"\r\n                        (click)=\"getHostsOfVisit(visit.id)\">\r\n                        <img src=\"assets/images/user.svg\" width=\"18px\">\r\n                    </button>\r\n                </mat-cell>\r\n\r\n                <mat-menu #mhosts=\"matMenu\">\r\n\r\n                    <button mat-menu-item *ngFor=\"let host of hosts\">\r\n                        {{host.user.name}}\r\n                    </button>\r\n                </mat-menu>\r\n            </ng-container>\r\n\r\n            <mat-header-row *matHeaderRowDef=\"vtdc\"></mat-header-row>\r\n            <mat-row *matRowDef=\"let row; columns: vtdc\"></mat-row>\r\n        </mat-table>\r\n    </mat-card-content>\r\n</mat-card>","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { DashboardComponent } from '@dashboard/dashboard.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: DashboardComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class DashboardRoutingModule { }\r\n","<div class=\"container container-cover container-dashboard\">\r\n    <div *ngFor=\"let department of departments; let i = index\">\r\n       <app-visits [department]=\"department\"></app-visits>\r\n    </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { DepartmentModel } from '@models/department.model';\r\nimport { VisitModel } from '@models/visit.model';\r\nimport { AuthenticationService } from '@services/authentication.service';\r\nimport { DepartmentService } from '@services/department.service';\r\nimport { VisitService } from '@services/visit.service';\r\nimport { Socket } from 'ngx-socket-io';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.css']\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n  departments: DepartmentModel[] = [];\r\n\r\n  constructor(\r\n    private $department: DepartmentService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  ngAfterContentInit(): void {\r\n    this.getDepartments();\r\n  }\r\n\r\n  getDepartments(): void {\r\n    this.$department.getDepartments().subscribe(\r\n      (departments: DepartmentModel[]) => {\r\n        this.departments = departments;\r\n      },\r\n    );\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { DashboardRoutingModule } from '@dashboard/dashboard-routing.module';\r\nimport { DashboardComponent } from '@dashboard/dashboard.component';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { VisitsComponent } from './visits/visits.component';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\n\r\n\r\n@NgModule({\r\n  declarations: [DashboardComponent, VisitsComponent],\r\n  imports: [\r\n    CommonModule,\r\n    DashboardRoutingModule,\r\n    MatCardModule,\r\n    MatTableModule,\r\n    MatMenuModule,\r\n  ]\r\n})\r\nexport class DashboardModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpResponseModel } from '@models/http/response.model';\r\nimport { UserModel } from '@models/user.model';\r\nimport { map } from 'rxjs/operators';\r\nimport { ApiService } from '@services/api.service';\r\nimport { ConfigService } from './config.service';\r\nimport { Observable } from 'rxjs';\r\nimport { VisitModel } from '@models/visit.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class VisitService {\r\n  getVisitsOfUser(user: number, status: number, date: Date): Observable<VisitModel[]> {\r\n    let d = date.getDate();\r\n    let m = date.getMonth() + 1;\r\n    let y = date.getFullYear();\r\n    return this.$api.get(`/visit/user/${user}/status/${status}/date/${d}/${m}/${y}`).pipe(\r\n      map((result: HttpResponseModel): VisitModel[] => result.data.visits));\r\n  }\r\n\r\n  getHostsOfVisit(id: number): Observable<HttpResponseModel> {\r\n    return this.$api.get(`/visit/${id}/host/all`);\r\n  }\r\n\r\n  getVisitsOfVisitor(user: number, status: number, date: Date): Observable<VisitModel[]> {\r\n    let d = date.getDate();\r\n    let m = date.getMonth() + 1;\r\n    let y = date.getFullYear();\r\n    return this.$api.get(`/visit/visitor/${user}/status/${status}/date/${d}/${m}/${y}`).pipe(\r\n      map((result: HttpResponseModel): VisitModel[] => result.data.visits));\r\n  }\r\n\r\n  getVisitsOfDepartment(department: number): Observable<VisitModel[]> {\r\n    return this.$api.get(`/visit/department/${department}/all`).pipe(\r\n      map((result: HttpResponseModel): VisitModel[] => result.data.visits));\r\n  }\r\n\r\n  constructor(\r\n    private $api: ApiService,\r\n    public config: ConfigService,\r\n  ) {\r\n  }\r\n}\r\n"]}