{"version":3,"sources":["./src/app/dashboard/visits/visits.component.ts","./src/app/dashboard/visits/visits.component.html","./src/app/dashboard/dashboard-routing.module.ts","./src/app/dashboard/dashboard.component.html","./src/app/dashboard/dashboard.component.ts","./src/app/dashboard/dashboard.module.ts","./src/app/services/visit.service.ts"],"names":[],"mappings":"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","file":"dashboard-dashboard-module-es2015.js","sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { DepartmentModel } from '@models/department.model';\r\nimport { HttpResponseModel } from '@models/http/response.model';\r\nimport { VisitModel } from '@models/visit.model';\r\nimport { VisitService } from '@services/visit.service';\r\nimport { Socket } from 'ngx-socket-io';\r\n\r\n@Component({\r\n  selector: 'app-visits',\r\n  templateUrl: './visits.component.html',\r\n  styleUrls: ['./visits.component.css']\r\n})\r\nexport class VisitsComponent implements OnInit {\r\n  @Input()\r\n  department: DepartmentModel | null = null;\r\n\r\n  dtds: MatTableDataSource<VisitModel>\r\n    =\r\n    new MatTableDataSource<VisitModel>([]);\r\n\r\n  vtdc: string[] = ['id', 'agenda', 'accompanying', 'vehicle', 'terminal', 'time', 'hosts'];\r\n\r\n  hosts: any = [];\r\n\r\n  constructor(\r\n    private $visit: VisitService,\r\n    private socket: Socket,\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getVisits();\r\n    this.socket.on(`channel-${this.department?.id}`, (payload: any) => {\r\n      this.getVisits();\r\n    });\r\n  }\r\n\r\n  getVisits(): void {\r\n    this.$visit.getVisitsOfDepartment(this.department?.id || 0).subscribe(\r\n      (visits: VisitModel[]) => {\r\n        if (visits.length > 0) {\r\n          this.dtds.data = visits;\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  getTime(date: string): string {\r\n    return `${new Date(date).getHours()}:${new Date(date).getSeconds()}`;\r\n  }\r\n\r\n  getHostsOfVisit(id: number): void {\r\n    this.hosts = [];\r\n    this.$visit.getHostsOfVisit(id)\r\n      .subscribe(\r\n        (response: HttpResponseModel) => {\r\n          this.hosts = response.data.hosts;\r\n          console.log(this.hosts);\r\n        },\r\n      );\r\n  }\r\n}\r\n","<mat-card>\r\n    <mat-card-header>\r\n        <mat-card-title>{{department?.name}}</mat-card-title>\r\n    </mat-card-header>\r\n\r\n    <mat-card-content>\r\n        <!-- Table -->\r\n        <mat-table [dataSource]=\"dtds\" matSort>\r\n            <!-- ID Column -->\r\n            <ng-container matColumnDef=\"id\">\r\n                <mat-header-cell *matHeaderCellDef mat-sort-header>ID</mat-header-cell>\r\n                <mat-cell *matCellDef=\"let visit\">{{visit.id}}</mat-cell>\r\n            </ng-container>\r\n\r\n            <!-- Agenda Column -->\r\n            <ng-container matColumnDef=\"agenda\">\r\n                <mat-header-cell *matHeaderCellDef mat-sort-header>Agenda</mat-header-cell>\r\n                <mat-cell *matCellDef=\"let visit\">{{visit.agenda.label}}</mat-cell>\r\n            </ng-container>\r\n\r\n            <!-- Accompanying Column -->\r\n            <ng-container matColumnDef=\"accompanying\">\r\n                <mat-header-cell *matHeaderCellDef mat-sort-header>ACC</mat-header-cell>\r\n                <mat-cell *matCellDef=\"let visit\">{{visit.accompanying}}</mat-cell>\r\n            </ng-container>\r\n\r\n            <!-- Terminal Column -->\r\n            <ng-container matColumnDef=\"terminal\">\r\n                <mat-header-cell *matHeaderCellDef mat-sort-header>Terminal</mat-header-cell>\r\n                <mat-cell *matCellDef=\"let visit\">{{visit.terminal_in.name}}</mat-cell>\r\n            </ng-container>\r\n\r\n            <!-- Time Column -->\r\n            <ng-container matColumnDef=\"time\">\r\n                <mat-header-cell *matHeaderCellDef mat-sort-header>Time</mat-header-cell>\r\n                <mat-cell *matCellDef=\"let visit\">{{getTime(visit.time_in)}}</mat-cell>\r\n            </ng-container>\r\n\r\n            <!-- Vehicle Column -->\r\n            <ng-container matColumnDef=\"vehicle\">\r\n                <mat-header-cell *matHeaderCellDef mat-sort-header>Vehicle</mat-header-cell>\r\n                <mat-cell *matCellDef=\"let visit\">{{visit.vehicle}}</mat-cell>\r\n            </ng-container>\r\n\r\n            <!-- Hosts Column -->\r\n            <ng-container matColumnDef=\"hosts\">\r\n                <mat-header-cell *matHeaderCellDef mat-sort-header>Hosts</mat-header-cell>\r\n                <mat-cell *matCellDef=\"let visit\">\r\n                    <button mat-icon-button class=\"mat-elevation-z\" [matMenuTriggerFor]=\"mhosts\"\r\n                        (click)=\"getHostsOfVisit(visit.id)\">\r\n                        <img src=\"assets/images/user.svg\" width=\"18px\">\r\n                    </button>\r\n                </mat-cell>\r\n\r\n                <mat-menu #mhosts=\"matMenu\">\r\n\r\n                    <button mat-menu-item *ngFor=\"let host of hosts\">\r\n                        {{host.user.name}}\r\n                    </button>\r\n                </mat-menu>\r\n            </ng-container>\r\n\r\n            <mat-header-row *matHeaderRowDef=\"vtdc\"></mat-header-row>\r\n            <mat-row *matRowDef=\"let row; columns: vtdc\"></mat-row>\r\n        </mat-table>\r\n    </mat-card-content>\r\n</mat-card>","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { DashboardComponent } from '@dashboard/dashboard.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: DashboardComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class DashboardRoutingModule { }\r\n","<div class=\"container container-cover container-dashboard\">\r\n    <div *ngFor=\"let department of departments; let i = index\">\r\n       <app-visits [department]=\"department\"></app-visits>\r\n    </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { DepartmentModel } from '@models/department.model';\r\nimport { VisitModel } from '@models/visit.model';\r\nimport { AuthenticationService } from '@services/authentication.service';\r\nimport { DepartmentService } from '@services/department.service';\r\nimport { VisitService } from '@services/visit.service';\r\nimport { Socket } from 'ngx-socket-io';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.css']\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n  departments: DepartmentModel[] = [];\r\n\r\n  constructor(\r\n    private $department: DepartmentService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  ngAfterContentInit(): void {\r\n    this.getDepartments();\r\n  }\r\n\r\n  getDepartments(): void {\r\n    this.$department.getDepartments().subscribe(\r\n      (departments: DepartmentModel[]) => {\r\n        this.departments = departments;\r\n      },\r\n    );\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { DashboardRoutingModule } from '@dashboard/dashboard-routing.module';\r\nimport { DashboardComponent } from '@dashboard/dashboard.component';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { VisitsComponent } from './visits/visits.component';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\n\r\n\r\n@NgModule({\r\n  declarations: [DashboardComponent, VisitsComponent],\r\n  imports: [\r\n    CommonModule,\r\n    DashboardRoutingModule,\r\n    MatCardModule,\r\n    MatTableModule,\r\n    MatMenuModule,\r\n  ]\r\n})\r\nexport class DashboardModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpResponseModel } from '@models/http/response.model';\r\nimport { UserModel } from '@models/user.model';\r\nimport { map } from 'rxjs/operators';\r\nimport { ApiService } from '@services/api.service';\r\nimport { ConfigService } from './config.service';\r\nimport { Observable } from 'rxjs';\r\nimport { VisitModel } from '@models/visit.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class VisitService {\r\n  getVisitsOfUser(user: number, status: number, date: Date): Observable<VisitModel[]> {\r\n    let d = date.getDate();\r\n    let m = date.getMonth() + 1;\r\n    let y = date.getFullYear();\r\n    return this.$api.get(`/visit/user/${user}/status/${status}/date/${d}/${m}/${y}`).pipe(\r\n      map((result: HttpResponseModel): VisitModel[] => result.data.visits));\r\n  }\r\n\r\n  getHostsOfVisit(id: number): Observable<HttpResponseModel> {\r\n    return this.$api.get(`/visit/${id}/host/all`);\r\n  }\r\n\r\n  getVisitsOfVisitor(user: number, status: number, date: Date): Observable<VisitModel[]> {\r\n    let d = date.getDate();\r\n    let m = date.getMonth() + 1;\r\n    let y = date.getFullYear();\r\n    return this.$api.get(`/visit/visitor/${user}/status/${status}/date/${d}/${m}/${y}`).pipe(\r\n      map((result: HttpResponseModel): VisitModel[] => result.data.visits));\r\n  }\r\n\r\n  getVisitsOfDepartment(department: number): Observable<VisitModel[]> {\r\n    return this.$api.get(`/visit/department/${department}/all`).pipe(\r\n      map((result: HttpResponseModel): VisitModel[] => result.data.visits));\r\n  }\r\n\r\n  constructor(\r\n    private $api: ApiService,\r\n    public config: ConfigService,\r\n  ) {\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}